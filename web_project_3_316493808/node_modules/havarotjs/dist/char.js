"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Char_text;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Char = void 0;
const regularExpressions_1 = require("./utils/regularExpressions");
const consonants = /[\u{05D0}-\u{05F2}]/u;
const ligature = /[\u{05C1}-\u{05C2}]/u;
const dagesh = /[\u{05BC}\u{05BF}]/u; // includes rafe
const niqqud = /[\u{05B0}-\u{05BB}\u{05C7}]/u;
/**
 * A Hebrew character and its positioning number for being sequenced correctly.
 * See [[`Cluster`]] for correct normalization.
 */
class Char {
    constructor(char) {
        _Char_text.set(this, void 0);
        __classPrivateFieldSet(this, _Char_text, char, "f");
    }
    /**
     * @returns the text of the Char
     *
     * ```typescript
     * const text: Text = new Text("אֱלֹהִ֑ים");
     * text.chars[0].text;
     * // "א"
     * ```
     */
    get text() {
        return __classPrivateFieldGet(this, _Char_text, "f");
    }
    findPos() {
        const char = this.text;
        if (consonants.test(char)) {
            return 0;
        }
        if (ligature.test(char)) {
            return 1;
        }
        if (dagesh.test(char)) {
            return 2;
        }
        if (niqqud.test(char)) {
            return 3;
        }
        if (regularExpressions_1.taamim.test(char)) {
            return 4;
        }
        // i.e. any non-hebrew char
        return 10;
    }
    /**
     * @returns a number used for sequencing
     *
     * - consonants = 0
     * - ligatures = 1
     * - dagesh or rafe = 2
     * - niqqud (i.e vowels) = 3
     * - taamim (i.e. accents) = 4
     *
     * ```typescript
     * const text: Text = new Text("אֱלֹהִ֑ים");
     * text.chars[0].sequencePosition; // the aleph
     * // 0
     * text.chars[1].sequencePosition; // the segol
     * // 3
     * ```
     */
    get sequencePosition() {
        return this.findPos();
    }
}
exports.Char = Char;
_Char_text = new WeakMap();
//# sourceMappingURL=char.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.remove = void 0;
const sequence_1 = require("./sequence");
const cantillation = /[\u{0591}-\u{05AF}\u{05BF}\u{05C0}\u{05C3}-\u{05C6}\u{05F3}\u{05F4}]/gu;
const vowels = /[\u{05B0}-\u{05BD}\u{05BF}\u{05C7}]/gu;
const shinDot = /\u{05C1}/gu;
const sinDot = /\u{05C2}/gu;
const removeItem = (text, item) => text.replace(item, "");
/**
 * removes taamim and optionally removes certain niqqudim
 *
 * @param text - a string of Hebrew characters
 * @param RemoveOptions - {@link RemoveOptions}
 * @returns Hebrew characters with taamim and niqqud optionally removed
 *
 * @example Default
 *
 * ```ts
 * heb.remove("שָׂרַ֣י אִשְׁתְּךָ֔");
 * // "שָׂרַי אִשְׁתְּךָ";
 * ```
 *
 * @example Remove vowels
 *
 * ```ts
 * heb.remove("שָׂרַ֣י אִשְׁתְּךָ֔", { removeVowels: true });
 * // "שׂרי אשׁתך";
 * ```
 *
 * @example Remove all
 *
 * ```ts
 * heb.remove("שָׂרַ֣י אִשְׁתְּךָ֔", { removeVowels: true, removeShinDot: true, removeSinDot: true });
 * // "שרי אשתך";
 * ```
 */
const remove = (text, { removeVowels = false, removeShinDot = false, removeSinDot = false } = {}) => {
    const sequenced = (0, sequence_1.sequence)(text);
    const remCantillation = removeItem(sequenced, cantillation);
    const remVowels = removeVowels ? removeItem(remCantillation, vowels) : remCantillation;
    const remShin = removeShinDot ? removeItem(remVowels, shinDot) : remVowels;
    return removeSinDot ? removeItem(remShin, sinDot) : remShin;
};
exports.remove = remove;
